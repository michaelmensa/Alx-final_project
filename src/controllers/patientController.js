import Patient from '../config/Schema/patient';

/**
 * generatePatientCustomId
 * generates simplified Id for application use
 * ObjectId generated by MongoDB won't be practical.
 * */

async function generatePatientCustomId(filter) {
  const count = await Patient.countDocuments(filter);
  const customID = `P${(count + 1).toString().padStart(3, '0')}`;
  return customID;
}

const patientController = {
  postNew: async (req, res) => {
    const firstName = req.body ? req.body.first : null;
    const otherName = req.body ? req.body.middle : null;
    const lastName = req.body ? req.body.last : null;
    const gender = req.body ? req.body.gender : null;
    const dOB = req.body ? req.body.dob : null;

    const contact = req.body ? req.body.mobile : null;
    const occupation = req.body ? req.body.occupation : null;
    const email = req.body ? req.body.email : null;
    const maritalStatus = req.body ? req.body.marital : null;
    const clinicId = req.session.clinic.id;
    if (!firstName || !lastName) {
      res.status(400).json({ error: 'Patient Name is missing' });
      return;
    }
    if (!gender) {
      res.status(400).json({ error: 'Choose Gender' });
      return;
    }
    if (!contact) {
      res.status(400).json({ error: 'Patient phoneNumber is missing' });
      return;
    }
    if (!occupation) {
      res.status(400).json({ error: 'Patient Profession is missing' });
      return;
    }

    const patientID = await generatePatientCustomId(clinicId);

    try {
      // check if clinic exists
      const filter = {
        $and: [
          { firstName },
          { lastName },
          { gender },
          { contact },
          { occupation },
          { clinicId },
        ],
      };
      const existingPatient = await Patient.findOne(filter);
      if (!existingPatient) {
        const patient = await Patient.create({
          patientID,
          firstName,
          lastName,
          otherName,
          dOB,
          gender,
          contact,
          email,
          maritalStatus,
          occupation,
          clinicId,
        });
        console.log('new Patient created:', patient.patientID);
        res.redirect('/employee/dashboard');
      } else {
        res.status(400).json({ error: 'Patient Already exists' });
      }
    } catch (err) {
      res.status(500).json({ error: `${err}` });
    }
  },

  getPatientForm: (req, res) => {
    res.render('register_patient');
  },

  getShow: async (req, res) => {
    // get patient by req.params.id (patient._id)
    const patientId = req.params.id;
    const clinicId = req.session.clinic.id;
    try {
      const patient = await Patient.findById(patientId);
      if (patient.clinicId === clinicId) {
        const result = {
          id: patient.patientID,
          name: `${patient.firstName} ${patient.lastName}`,
        };
        res.send(result);
      }
    } catch (err) {
      res.status(500).json({ error: err });
    }
  },

  getIndex: async (req, res) => {
    // get patient and if query, get by patientID, firstName or,
    // lastName or gender or phoneNumber
    // and page number for pagination
    try {
      // Extract query parameters
      const {
        patientID, firstName, lastName, page, phoneNumber, gender, profession,
      } = req.query;

      // Define query conditions based on clinicId
      const clinicId = req.session.clinic.id;
      const queryConditions = { clinicId };

      // Add additional query conditions based on provided parameters
      const orConditions = [];
      if (patientID) orConditions.push({ patientID });
      if (firstName) orConditions.push({ firstName });
      if (lastName) orConditions.push({ lastName });
      if (phoneNumber) orConditions.push({ phoneNumber });
      if (gender) orConditions.push({ gender });
      if (profession) orConditions.push({ profession });

      if (orConditions.length > 0) {
        queryConditions.$or = orConditions;
      }

      // Pagination
      const pageSize = 10; // Number of employees per page
      const pageNumber = parseInt(page, 10) || 1; // Current page number

      // Fetch employees based on query conditions and pagination
      const patients = await Patient.find(queryConditions)
        .skip((pageNumber - 1) * pageSize)
        .limit(pageSize);

      const results = patients.map((patient) => ({
        id: patient.patientID,
        name: `${patient.firstName} ${patient.lastName}`,
      }));
      res.status(200).json(results);
    } catch (err) {
      console.error('Failed to get patients:', err);
      res.status(500).json({ error: 'Failed to get patients' });
    }
  },

  getStats: async (req, res) => {
    const clinicId = req.session.clinic.id;
    try {
      const patientCount = await Patient.countDocuments({ clinicId });
      res.status(200).json({
        Patients: patientCount,
      });
    } catch (err) {
      console.log('Failed to retrieve employee count', err);
      res.status(500).json({ error: 'Failed' });
    }
  },
};

module.exports = patientController;
